rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    function isSigned() {
      return request.auth != null;
    }
    
    function isPossibleSize() {
      return request.resource.size < 20 * 1024 * 1024;
    }
    function isPossibleUpload() {
      return isPossibleSize();
    }
    function isOwn (uid) {
      return isSigned() && request.auth.uid == uid //firestore.exists(/databases/(default)/documents/users/$(request.auth.id));
    }

    function isAdmin () {
      return isSigned() && firestore.get(/databases/(default)/documents/users/$(request.auth.id)).type == 'admin';
    }

    match /userPosts/{uid}/{id}/{allPaths=**} {   
      allow read: if isOwn(uid) || isAdmin();
      allow create: if isOwn(uid) && isPossibleUpload();
      allow update: if (isOwn(uid) && isPossibleUpload()) || isAdmin();
      allow delete: if isOwn(uid) || isAdmin();
    }

    match /userAttachments/{uid}/{id}/{allPaths=**} {
      allow read: if isOwn(uid) || isAdmin()
      allow create: if isOwn(uid) && isPossibleUpload();
      allow update: if (isOwn(uid) && isPossibleUpload()) || isAdmin();
      allow delete: if isOwn(uid) && isAdmin();
    }
  }
}
